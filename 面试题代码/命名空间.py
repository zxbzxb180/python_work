# 命名空间
# 定义：一个字典，key是变量名，value是变量的值
#
# 每个函数拥有自己的命名空间（局部命名空间）：记录该函数的变量、参数、局部变量（如果想在局部命名空间中声明全局变量，需在变量名前添加global）
# 每个模块拥有自己的命名空间（全局命名空间）：记录该模块的变量（函数、类，导入的模块、常量）
# 内置命名空间：任何模块可访问，存放内置函数和异常
#
# 查找顺序
#
# 当某行代码使用变量x的值时，python按如下顺序在各名称空间中查找变量（找不到则在下一级命名空间中继续找）：
# 局部（若是嵌套函数，则现在当前函数命名空间中找，找不到再在父函数的命名空间中找） -> 全局 -> 内置 -> 抛出NameError异常
#
# 生命周期
#
# 内置命名空间：在python解释器启动时创建，一直保留不删除
# 模块的全局命名空间：读入模块定义时创建，保存到解释器退出
# 函数的局部命名空间：函数调用时创建，函数返回或抛出异常时删除（每个递归调用的函数拥有自己的命名空间）
#
# 访问
#
# 通过 locals() 获得局部命名空间，通过 globals() 获得全局命名空间
# locals()返回的是局部命名空间的拷贝，因此修改它不会影响局部变量的值
# globals()返回实际的全局命名空间，因此修改它会影响全局变量的值
#
# 引申
# from 模块名 import 对象名 和 import 模块名 的区别
#
# import 模块名：导入模块，其保持自己的命名空间，因此使用其内的对象时，需要在前面添加模块名
# from 模块名 import 对象名：将目标模块中指定的对象导入本模块（将对象放入本模块的命名空间）。因此可以直接访问导入的对象（使用globals()可看到导入对象）
